
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/python_examples/plot_table.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_python_examples_plot_table.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_python_examples_plot_table.py:


Table
===========================

This example finds and optimized seating arrangement for a dinner party.
The variables are the chairs and the labels are the persons.
The unary factors encode how much each person likes each chair.
The binary factors encode how much each person likes the person next to them.
The contraints ensure that a person can only sit on one chair

.. GENERATED FROM PYTHON SOURCE LINES 11-19

.. code-block:: default


    import numpy as np
    import nxtgm
    # this example assume there are less or qual number of seats than persons
    n_persons = 20
    n_seats = n_persons // 2
    assert n_seats <= n_persons








.. GENERATED FROM PYTHON SOURCE LINES 20-22

each person can prefer a table position
we will encode this as a n_persons x n_seats matrix

.. GENERATED FROM PYTHON SOURCE LINES 22-24

.. code-block:: default

    person_seat_preference = np.random.rand(n_persons, n_seats) * 2 - 1








.. GENERATED FROM PYTHON SOURCE LINES 25-29

n_persons x n_persons matrix to encode how much each person
likes each other person. The eneries are in [-1 , 1] where
-1 means they hate each other and 1 means they love each other.
0 means they are indifferent

.. GENERATED FROM PYTHON SOURCE LINES 29-33

.. code-block:: default

    person_person_preference = np.random.rand(n_persons, n_persons) * 2 - 1
    person_person_preference = (person_person_preference + person_person_preference.T) / 2









.. GENERATED FROM PYTHON SOURCE LINES 34-36

create a graphical model with n_seats variables
each variable can have n_persons labels

.. GENERATED FROM PYTHON SOURCE LINES 36-38

.. code-block:: default

    gm = nxtgm.DiscreteGm(num_var=n_seats, num_labels=n_persons)








.. GENERATED FROM PYTHON SOURCE LINES 39-41

add a unary factor for each seat
the unary factor encodes how much each person likes each seat

.. GENERATED FROM PYTHON SOURCE LINES 41-48

.. code-block:: default

    for seat in range(n_seats):

        values = person_seat_preference[:,seat]
        assert values.shape == (n_persons,)
        function_id = gm.add_function(values)
        gm.add_factor([seat], function_id)








.. GENERATED FROM PYTHON SOURCE LINES 49-54

Add a binary factor for neighboring seats.
The binary factor encodes how much each person likes the person next to them
we assume a round tablel.
The value table for the binary factor is a n_persons x n_persons matrix
and is the same for all binary factors

.. GENERATED FROM PYTHON SOURCE LINES 54-75

.. code-block:: default


    function_id = gm.add_function(person_person_preference)

    for seat in range(n_seats):

        left_seat = seat - 1
        if left_seat < 0:
            left_seat = n_seats - 1

        right_seat = seat + 1
        if right_seat >= n_seats:
            right_seat = 0

        # left seat
        variables = [seat, left_seat]
        gm.add_factor(variables, function_id)

        # right seat
        variables = [seat, right_seat]
        gm.add_factor(variables, function_id)








.. GENERATED FROM PYTHON SOURCE LINES 76-78

constraints so that each person is only seated once
so we need a constraint for each pair of seats

.. GENERATED FROM PYTHON SOURCE LINES 78-85

.. code-block:: default

    constraint_function = nxtgm.PairwiseUniqueLables(num_labels=n_persons)
    constrain_function_id = gm.add_constraint_function(constraint_function)
    for seat1 in range(n_seats-1):
        for seat2 in range(seat1 + 1, n_seats):
            variables = [seat1, seat2]
            gm.add_constraint(variables, constrain_function_id)








.. GENERATED FROM PYTHON SOURCE LINES 86-87

optimize the model with ICM

.. GENERATED FROM PYTHON SOURCE LINES 87-94

.. code-block:: default

    Optimizer = nxtgm.Icm
    optimizer = Optimizer(gm)
    callack = Optimizer.ReporterCallback(optimizer)
    optimizer.optimize(callack)
    best_solution = optimizer.best_solution()
    print(best_solution)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [ 3 10  8 14 19 13 15  6  7  0]




.. GENERATED FROM PYTHON SOURCE LINES 95-96

optimize with an ILP solver

.. GENERATED FROM PYTHON SOURCE LINES 96-101

.. code-block:: default

    Optimizer = nxtgm.IlpHighs
    optimizer = Optimizer(gm)
    callack = Optimizer.ReporterCallback(optimizer)
    optimizer.optimize(callack)
    best_solution = optimizer.best_solution()
    print(best_solution)



.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [19 10  8  6 15 13  1  0  7  9]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.360 seconds)


.. _sphx_glr_download_examples_python_examples_plot_table.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_table.py <plot_table.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_table.ipynb <plot_table.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
