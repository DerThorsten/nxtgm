
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/python_examples/plot_hello_world.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_python_examples_plot_hello_world.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_python_examples_plot_hello_world.py:


Hello World
===========================

This example introduces the basic usage of nxtgm.

.. GENERATED FROM PYTHON SOURCE LINES 7-13

.. code-block:: default

    from __future__ import annotations

    import numpy as np
    import nxtgm









.. GENERATED FROM PYTHON SOURCE LINES 14-19

The absolute minimal (pointless) example
------------------------

Here we create a graphical model with a single variable
which can have two values, 0 or 1.

.. GENERATED FROM PYTHON SOURCE LINES 19-22

.. code-block:: default


    gm = nxtgm.DiscreteGm(num_var=1, num_labels=2)








.. GENERATED FROM PYTHON SOURCE LINES 23-29

We can now  add a single unary factor to the model.
The factor is a simple table with two entries.
The first entry is the energy for the variable being 0,
the second entry is the energy for the variable being 1.
the "value_table" for a factor is called "function".
we first add such a function

.. GENERATED FROM PYTHON SOURCE LINES 29-31

.. code-block:: default

    function_id = gm.add_function(np.array([42.0, 30.0]))








.. GENERATED FROM PYTHON SOURCE LINES 32-33

We can now add a factor to the model.

.. GENERATED FROM PYTHON SOURCE LINES 33-37

.. code-block:: default

    variables = [0]  # the factor is connected to the only variable in the model
    gm.add_factor(variables, function_id)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0



.. GENERATED FROM PYTHON SOURCE LINES 38-43

We can now optimize the model and find the best labels for all
variables in the model. In this case its a single variable.
The result is a numpy array with the best label for each variable.
Since this model is very simple (and the result is obvious) we
use a brute force optimizer.

.. GENERATED FROM PYTHON SOURCE LINES 43-50

.. code-block:: default


    optimizer = nxtgm.BruteForceNaive

    optimizer = nxtgm.BruteForceNaive(gm)
    optimizer.optimize()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <OptimizationStatus.OPTIMAL: 0>



.. GENERATED FROM PYTHON SOURCE LINES 51-54

Get the best solution from the optimizer
in our case it will be [1] since the energy for the variable being 0 is  42.0
and the energy for the variable being 1 is 30.0

.. GENERATED FROM PYTHON SOURCE LINES 54-56

.. code-block:: default

    best_solution = optimizer.best_solution()
    best_solution




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([1], dtype=uint16)




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.017 seconds)


.. _sphx_glr_download_examples_python_examples_plot_hello_world.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_hello_world.py <plot_hello_world.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_hello_world.ipynb <plot_hello_world.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
